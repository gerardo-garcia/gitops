#!/bin/bash


function generator_encrypted_secret_cloud_credentials() {
  local CLOUD_CREDENTIALS_FILENAME="$1"
  local SECRET_NAME="$2"
  local PUBLIC_KEY="$3"
  local SECRET_MANIFEST_FILENAME="${4:-secret-${SECRET_NAME}.yaml}"

  join_lists \
    <(cat) \
    <(cat "${CREDENTIALS_DIR}/${CLOUD_CREDENTIALS_FILENAME}" | \
      kubectl create secret generic ${SECRET_NAME} \
        --namespace crossplane-system \
        --from-file creds=/dev/stdin \
        -o yaml --dry-run=client | \
      encrypt_secret_from_stdin "${PUBLIC_KEY_MGMT}" | \
      manifest2list | \
      set_filename_to_items "${SECRET_MANIFEST_FILENAME}")
}


# Create ProviderConfig for Azure
function add_providerconfig_for_azure() {
  # Inputs
  local CLOUD_CREDENTIALS="$1"
  local NEW_SECRET_NAME="$2"
  local PROVIDERCONFIG_NAME="${3:-default}"
  local PUBLIC_KEY="${4:-${PUBLIC_KEY_MGMT}}"
  local TARGET_FOLDER="${5:-${MGMT_ADDON_CONFIG_DIR}}"

  # Path to folder with base templates
  local TEMPLATES="${SW_CATALOGS_REPO_DIR}/infra-configs/crossplane/providers/azure/templates/"

  # Pipeline
  folder2list \
    "${TEMPLATES}" | \
  patch_replace \
    ".metadata.name" \
    "${PROVIDERCONFIG_NAME}" \
    "| select(.kind == \"ProviderConfig\") | select(.metadata.name == \"default\")" | \
  patch_replace \
    ".spec.credentials.secretRef.name" \
    "${NEW_SECRET_NAME}" \
    "| select(.kind == \"ProviderConfig\") | select(.metadata.name == \"default\")" | \
  rename_file_in_items \
    "crossplane-providerconfig-azure.yaml" \
    "crossplane-providerconfig-azure-${PROVIDERCONFIG_NAME}.yaml" | \
  generator_encrypted_secret_cloud_credentials \
    "${CLOUD_CREDENTIALS}" \
    "${NEW_SECRET_NAME}" \
    "${PUBLIC_KEY}" | \
  list2folder_cp_over \
    "${TARGET_FOLDER}"
}


# Create ProviderConfig for GCP
function add_providerconfig_for_gcp() {
  # Inputs
  local CLOUD_CREDENTIALS="$1"
  local NEW_SECRET_NAME="$2"
  local GCP_PROJECT="$3"
  local PROVIDERCONFIG_NAME="${4:-default}"
  local PUBLIC_KEY="${5:-${PUBLIC_KEY_MGMT}}"
  local TARGET_FOLDER="${6:-${MGMT_ADDON_CONFIG_DIR}}"

  # Path to folder with base templates
  local TEMPLATES="${SW_CATALOGS_REPO_DIR}/infra-configs/crossplane/providers/gcp/templates/"

  # Pipeline
  folder2list \
    "${TEMPLATES}" | \
  patch_replace \
    ".metadata.name" \
    "${PROVIDERCONFIG_NAME}" \
    "| select(.kind == \"ProviderConfig\") | select(.metadata.name == \"default\")" | \
  patch_replace \
    ".spec.credentials.secretRef.name" \
    "${NEW_SECRET_NAME}" \
    "| select(.kind == \"ProviderConfig\") | select(.metadata.name == \"default\")" | \
  patch_replace \
    ".spec.projectID" \
    "${GCP_PROJECT}" \
    "| select(.kind == \"ProviderConfig\") | select(.metadata.name == \"default\")" | \
  rename_file_in_items \
    "crossplane-providerconfig-gcp.yaml" \
    "crossplane-providerconfig-gcp-${PROVIDERCONFIG_NAME}.yaml" | \
  generator_encrypted_secret_cloud_credentials \
    "${CLOUD_CREDENTIALS}" \
    "${NEW_SECRET_NAME}" \
    "${PUBLIC_KEY}" | \
  list2folder_cp_over \
    "${TARGET_FOLDER}"
}


# Create AKS cluster (without bootstrap)
function create_cluster_aks() {
  local CLUSTER_NAME="$1"
  local VM_SIZE="$2"
  local NODE_COUNT="$3"
  local CLUSTER_LOCATION="$4"
  local RG_NAME="$5"
  local K8S_VERSION="${6:-"'1.28'"}"
  local PROVIDERCONFIG_NAME="${7:-default}"
  local CLUSTER_KUSTOMIZATION_NAME="${8:$(safe_name ${CLUSTER_NAME})}"
  local TARGET_FOLDER="${9:-${MGMT_RESOURCES_DIR}}"
  local MANIFEST_FILENAME="${10:-"${CLUSTER_NAME}.yaml"}"
  local TEMPLATES="${11:-"${SW_CATALOGS_REPO_DIR}/cloud-resources/aks/templates/"}"
  local TEMPLATE_MANIFEST_FILENAME="${12:-"aks01.yaml"}"

  export CLUSTER_KUSTOMIZATION_NAME
  folder2list \
    "${TEMPLATES}" | \
  replace_env_vars \
    '${CLUSTER_KUSTOMIZATION_NAME}' | \
  patch_replace \
    ".spec.postBuild.substitute.cluster_name" \
    "${CLUSTER_NAME}" \
    "| select(.kind == \"Kustomization\") | select(.metadata.name == \"${CLUSTER_KUSTOMIZATION_NAME}\")" | \
  patch_replace \
    ".spec.postBuild.substitute.cluster_name" \
    "${CLUSTER_NAME}" \
    "| select(.kind == \"Kustomization\") | select(.metadata.name == \"${CLUSTER_KUSTOMIZATION_NAME}\")" | \
  patch_replace \
    ".spec.postBuild.substitute.vm_size" \
    "${VM_SIZE}" \
    "| select(.kind == \"Kustomization\") | select(.metadata.name == \"${CLUSTER_KUSTOMIZATION_NAME}\")" | \
  patch_replace \
    ".spec.postBuild.substitute.node_count" \
    "${NODE_COUNT}" \
    "| select(.kind == \"Kustomization\") | select(.metadata.name == \"${CLUSTER_KUSTOMIZATION_NAME}\")" | \
  patch_replace \
    ".spec.postBuild.substitute.cluster_location" \
    "${CLUSTER_LOCATION}" \
    "| select(.kind == \"Kustomization\") | select(.metadata.name == \"${CLUSTER_KUSTOMIZATION_NAME}\")" | \
  patch_replace \
    ".spec.postBuild.substitute.rg_name" \
    "${RG_NAME}" \
    "| select(.kind == \"Kustomization\") | select(.metadata.name == \"${CLUSTER_KUSTOMIZATION_NAME}\")" | \
  patch_replace \
    ".spec.postBuild.substitute.k8s_version" \
    "${K8S_VERSION}" \
    "| select(.kind == \"Kustomization\") | select(.metadata.name == \"${CLUSTER_KUSTOMIZATION_NAME}\")" | \
  patch_replace \
    ".spec.postBuild.substitute.providerconfig_name" \
    "${PROVIDERCONFIG_NAME}" \
    "| select(.kind == \"Kustomization\") | select(.metadata.name == \"${CLUSTER_KUSTOMIZATION_NAME}\")" | \
  rename_file_in_items \
    "${TEMPLATE_MANIFEST_FILENAME}" \
    "${MANIFEST_FILENAME}" | \
  prepend_folder_path "${CLUSTER_KUSTOMIZATION_NAME}/" | \
  list2folder_cp_over \
    "${TARGET_FOLDER}"
}


# Generator to create a profile folder
function generator_profile_folder() {
  local CONFIGMAP_NAME="$1"
  local PROFILE_PATH="$2"
  local PROFILE_TYPE="$3"
  local REPO_URL="${4:-${FLEET_REPO_URL}}"
  local PROFILE_LOCAL_DIR="${5:-"${PROFILE_PATH}"}"

  join_lists \
    <(cat) \
    <(kubectl create configmap $(safe_name "${CONFIGMAP_NAME}") \
        --namespace flux-system \
        --from-literal=repo="${REPO_URL}" \
        --from-literal=path="${PROFILE_PATH}" \
        -o yaml \
        --dry-run=client  | \
      manifest2list | \
      set_label \
        "osm_profile_type" \
        "${PROFILE_TYPE}" | \
      set_filename_to_items "profile-configmap.yaml" | \
      prepend_folder_path "${PROFILE_LOCAL_DIR}/")
}


# Helper function to return the relative path of a profile
function path_to_profile() {
  local PROFILE_NAME="$1"
  local PROFILE_TYPE="$2"
  local PROJECT_NAME="${3:-"${MGMT_PROJECT_NAME}"}"

  case "${PROFILE_TYPE,,}" in

    "controller" | "infra-controller" | "infra-controllers" | "infra_controller" | "infra_controllers")
      echo -n "${PROJECT_NAME}/infra-controller-profiles/${PROFILE_NAME}"
      return 0
      ;;

    "config" | "infra-config" | "infra-configs" | "infra_config" | "infra_configs")
      echo -n "${PROJECT_NAME}/infra-config-profiles/${PROFILE_NAME}"
      return 0
      ;;

    "managed" | "resources" | "managed-resources" | "managed_resources")
      echo -n "${PROJECT_NAME}/managed-resources/${PROFILE_NAME}"
      return 0
      ;;

     "app" |"apps" | "applications" | "cnf" | "cnfs" | "nf" | "nfs")
      echo -n "${PROJECT_NAME}/app-profiles/${PROFILE_NAME}"
      return 0
      ;;

    *)
      echo -n "------------ ERROR ------------"
      return 1
      ;;
  esac
}


# Function to create a new profile
function create_profile() {
  local PROFILE_NAME="$1"
  local PROFILE_TYPE="$2"
  local PROJECT_NAME="${3:-"${MGMT_PROJECT_NAME}"}"
  local FLEET_REPO_URL="${4:-"${FLEET_REPO_URL}"}"
  local FLEET_REPO_DIR="${5:-"${FLEET_REPO_DIR}"}"

  local TARGET_PROFILE_PATH="$(
    path_to_profile \
      "${PROFILE_NAME}" \
      "${PROFILE_TYPE}" \
      "${PROJECT_NAME}" \
  )"

  # Generate profile as `ResourceList` and render to target folder.
  echo "" | \
  generator_profile_folder \
    "${PROFILE_NAME}-${PROFILE_TYPE}" \
    "${TARGET_PROFILE_PATH}" \
    "${PROFILE_TYPE}" \
    "${FLEET_REPO_URL}" \
    "."  `# No need to prepend a folder path` | \
  list2folder_cp_over \
    "${FLEET_REPO_DIR}/${TARGET_PROFILE_PATH}"
}


# Function to delete a profile
function delete_profile() {
  local PROFILE_NAME="$1"
  local PROFILE_TYPE="$2"
  local PROJECT_NAME="${3:-"${MGMT_PROJECT_NAME}"}"
  local FLEET_REPO_DIR="${4:-"${FLEET_REPO_DIR}"}"

  local TARGET_PROFILE_PATH="$(
    path_to_profile \
      "${PROFILE_NAME}" \
      "${PROFILE_TYPE}" \
      "${PROJECT_NAME}" \
  )"

  # Delete the profile folder
  rm -rf "${FLEET_REPO_DIR}/${TARGET_PROFILE_PATH}"
}


# ----- BEGIN of Helper functions for remote cluster bootstrap -----

# Generate structure of profile folders prior to bootstrap
function generator_profile_folders_new_cluster() {
  # Inputs
  local PROFILE_NAME="$1"
  local FLEET_REPO_URL="$2"
  local PROJECT_NAME="${3:-"${MGMT_PROJECT_NAME}"}"
  # Optional inputs: Paths for each profile in the Git repo
  local INFRA_CONTROLLERS_PATH="${4:-"${PROJECT_NAME}/infra-controller-profiles/${PROFILE_NAME}"}"
  local INFRA_CONFIGS_PATH="${5:-"${PROJECT_NAME}/infra-config-profiles/${PROFILE_NAME}"}"
  local MANAGED_RESOURCES_PATH="${6:-"${PROJECT_NAME}/managed-resources/${PROFILE_NAME}"}"
  local APPS_PATH="${7:-"${PROJECT_NAME}/app-profiles/${PROFILE_NAME}"}"

  # Generate profiles as `ResourceList`. merging with inputs
  join_lists \
    <(cat) \
    <(
      echo "" | \
      generator_profile_folder \
        "${PROFILE_NAME}-profile-infra-controllers" \
        "${INFRA_CONTROLLERS_PATH}" \
        "infra-controllers" \
        "${FLEET_REPO_URL}" | \
      generator_profile_folder \
        "${PROFILE_NAME}-profile-infra-configs" \
        "${INFRA_CONFIGS_PATH}" \
        "infra-configs" \
        "${FLEET_REPO_URL}" | \
      generator_profile_folder \
        "${PROFILE_NAME}-profile-managed-resources" \
        "${MANAGED_RESOURCES_PATH}" \
        "managed-resources" \
        "${FLEET_REPO_URL}" | \
      generator_profile_folder \
        "${PROFILE_NAME}-profile-apps" \
        "${APPS_PATH}" \
        "apps" \
        "${FLEET_REPO_URL}"
      )
}


# Generate base Flux Kustomizations for the new cluster prior to bootstrap
function generator_base_kustomizations_new_cluster() {
  local CLUSTER_KUSTOMIZATION_NAME="$1"
  local FLEET_REPO_URL="$2"
  local SW_CATALOGS_REPO_URL="$3"
  local PROJECT_NAME="${4:-"${MGMT_PROJECT_NAME}"}"

  # Optional inputs:
  # Paths for each profile in the Git repo
  local INFRA_CONTROLLERS_PATH="${5:-"${PROJECT_NAME}/infra-controller-profiles/${CLUSTER_KUSTOMIZATION_NAME}"}"
  local INFRA_CONFIGS_PATH="${6:-"${PROJECT_NAME}/infra-config-profiles/${CLUSTER_KUSTOMIZATION_NAME}"}"
  local MANAGED_RESOURCES_PATH="${7:-"${PROJECT_NAME}/managed-resources/${CLUSTER_KUSTOMIZATION_NAME}"}"
  local APPS_PATH="${8:-"${PROJECT_NAME}/app-profiles/${CLUSTER_KUSTOMIZATION_NAME}"}"
  # Path for the source templates
  local TEMPLATES="${9:-"${SW_CATALOGS_REPO_DIR}/cloud-resources/flux-remote-bootstrap/cluster-base/templates"}"

  # Generate
  export CLUSTER_KUSTOMIZATION_NAME
  export FLEET_REPO_URL
  export SW_CATALOGS_REPO_URL
  export INFRA_CONTROLLERS_PATH
  export INFRA_CONFIGS_PATH
  export MANAGED_RESOURCES_PATH
  export APPS_PATH
  join_lists \
    <(cat) \
    <(
      folder2list \
        "${TEMPLATES}" | \
      replace_env_vars \
        '${CLUSTER_KUSTOMIZATION_NAME},${FLEET_REPO_URL},${SW_CATALOGS_REPO_URL},${INFRA_CONTROLLERS_PATH},${INFRA_CONFIGS_PATH},${MANAGED_RESOURCES_PATH},${APPS_PATH}'
    )
}


# Create SOPS configuration file for the root folder of the cluster
function create_sops_configuration_file_new_cluster() {
  local PUBLIC_KEY="$1"

  MANIFEST="creation_rules:
  - encrypted_regex: ^(data|stringData)$
    age: ${PUBLIC_KEY}
  # - path_regex: .*.yaml
  #   encrypted_regex: ^(data|stringData)$
  #   age: ${PUBLIC_KEY}"

  # Generate SOPS configuration file for the root folder
  echo "${MANIFEST}"
}


# Generate K8s secret for management cluster storing secret age key for the new cluster
function generator_k8s_age_secret_new_cluster() {
  local PRIVATE_KEY_NEW_CLUSTER="$1"
  local PUBLIC_KEY_MGMT="$2"
  local CLUSTER_AGE_SECRET_NAME="${3:-$(safe_name "sops-age-${CLUSTER_KUSTOMIZATION_NAME}")}"

  join_lists \
    <(cat) \
    <(
      echo "${PRIVATE_KEY_NEW_CLUSTER}" | \
      grep -v '^#' | \
      kubectl create secret generic "${CLUSTER_AGE_SECRET_NAME}" \
        --namespace=managed-resources \
        --from-file=agekey=/dev/stdin \
        -o yaml --dry-run=client | \
      encrypt_secret_from_stdin \
        "${PUBLIC_KEY_MGMT}" |
      manifest2list | \
      set_filename_to_items "${CLUSTER_AGE_SECRET_NAME}.yaml"
    )
}


# Generate bootstrap manifests for new cluster from the management cluster
function generator_bootstrap_new_cluster() {
  local CLUSTER_NAME="$1"
  local CLUSTER_KUSTOMIZATION_NAME="${2:$(safe_name ${CLUSTER_NAME})}"
  local CLUSTER_AGE_SECRET_NAME="${3:-$(safe_name "sops-age-${CLUSTER_KUSTOMIZATION_NAME}")}"

  # Paths and names for the templates
  local MANIFEST_FILENAME="${4:-"cluster-bootstrap-${CLUSTER_KUSTOMIZATION_NAME}.yaml"}"
  local TEMPLATES="${5:-"${SW_CATALOGS_REPO_DIR}/cloud-resources/flux-remote-bootstrap/bootstrap/templates"}"
  local TEMPLATE_MANIFEST_FILENAME="${6:-"remote-cluster-bootstrap.yaml"}"

  # Generate manifests
  export CLUSTER_KUSTOMIZATION_NAME
  export CLUSTER_NAME
  export CLUSTER_AGE_SECRET_NAME

  join_lists \
    <(cat) \
    <(
      folder2list \
        "${TEMPLATES}" | \
      rename_file_in_items \
        "${TEMPLATE_MANIFEST_FILENAME}" \
        "${MANIFEST_FILENAME}" | \
      replace_env_vars \
        '${CLUSTER_KUSTOMIZATION_NAME},${CLUSTER_NAME},${CLUSTER_AGE_SECRET_NAME}'
      )
}


# Auxiliary function to create kustomization manifests
function manifest_kustomization() {
  local KS_NAME="$1"
  local KS_NS="$2"
  local SOURCE_REPO="$3"
  local MANIFESTS_PATH="$4"
  local SOURCE_SYNC_INTERVAL="$5"
  local HEALTH_CHECK_TO="$6"
  local DEPENDS_ON="${7:-""}"
  local OPTIONS="${8:-""}"

  # Calculated inputs
  local OPTION_FOR_DEPENDS_ON="$(
    if [[ -z "${DEPENDS_ON}" ]];
    then
      echo ""
    else
      echo "--depends-on=${DEPENDS_ON}"
    fi
  )"
  local OPTIONS="\
    "${OPTIONS}" \
    "${OPTION_FOR_DEPENDS_ON}" \
  "

  # Create Kustomization manifest
  flux create kustomization "${KS_NAME}" \
      --namespace="${KS_NS}" \
      --source="${SOURCE_REPO}" \
      --path="${MANIFESTS_PATH}" \
      --interval="${SOURCE_SYNC_INTERVAL}" \
      --health-check-timeout="${HEALTH_CHECK_TO}" \
      ${OPTIONS} --export
}


# Helper function to generate a Kustomization
function generator_kustomization() {
  local MANIFEST_FILENAME="$1"
  local ALL_PARAMS=( "${@}" )
  local PARAMS=( "${ALL_PARAMS[@]:1}" )

  # Use manifest creator to become a generator
  make_generator \
    "${MANIFEST_FILENAME}" \
    manifest_kustomization \
      "${PARAMS[@]}"
}

# ----- END of Helper functions for remote cluster bootstrap -----


# Create bootstrap for remote cluster
function create_bootstrap_for_remote_cluster() {
  local CLUSTER_NAME="$1"
  local CLUSTER_KUSTOMIZATION_NAME="$2"
  local FLEET_REPO_URL="$3"
  local SW_CATALOGS_REPO_URL="$4"
  local AGE_KEY_NAME_NEW_CLUSTER="$5"
  local PUBLIC_KEY_NEW_CLUSTER="$6"
  local PRIVATE_KEY_NEW_CLUSTER="$7"
  local MGMT_PROJECT_NAME="${8:-${MGMT_PROJECT_NAME}}"
  local FLEET_REPO_DIR="${9:-"${FLEET_REPO_DIR}"}"
  local MGMT_RESOURCES_DIR="${10:-"${MGMT_RESOURCES_DIR}"}"

  # Local folders for each profile:
  # ------------------------------
  # INFRA_CONTROLLERS_DIR="${FLEET_REPO_DIR}/${INFRA_CONTROLLERS_PATH}"
  # INFRA_CONFIGS_DIR="${FLEET_REPO_DIR}/${INFRA_CONFIGS_PATH}"
  # MANAGED_RESOURCES_DIR="${FLEET_REPO_DIR}/${MANAGED_RESOURCES_PATH}"
  # APPS_DIR="${FLEET_REPO_DIR}/${APPS_PATH}"

  # Create profile folders
  echo "" | \
  generator_profile_folders_new_cluster \
    "${CLUSTER_KUSTOMIZATION_NAME}" \
    "${FLEET_REPO_URL}" \
    "${MGMT_PROJECT_NAME}" | \
  list2folder_cp_over \
    "${FLEET_REPO_DIR}"

  # Create base Kustomizations for the new cluster
  CLUSTER_FOLDER="${FLEET_REPO_DIR}/clusters/${CLUSTER_KUSTOMIZATION_NAME}"
  echo "" | \
  generator_base_kustomizations_new_cluster \
    "${CLUSTER_KUSTOMIZATION_NAME}" \
    "${FLEET_REPO_URL}" \
    "${SW_CATALOGS_REPO_URL}" \
    "${MGMT_PROJECT_NAME}" | \
  list2folder_cp_over \
    "${CLUSTER_FOLDER}"

  # Add SOPS configuration at the root folder of the cluster
  # NOTE: This file cannot be generated by pure KRM functions since it begins by a dot ('.')
  create_sops_configuration_file_new_cluster \
    "${PUBLIC_KEY_NEW_CLUSTER}" \
  > "${CLUSTER_FOLDER}/.sops.yaml"

  # Add also the public SOPS key to the repository so that others who clone the repo can encrypt new files
  # NOTE: This file cannot be generated by pure KRM functions since it begins by a dot ('.')
  # cp "${CREDENTIALS_DIR}/${AGE_KEY_NAME_NEW_CLUSTER}.pub" "${CLUSTER_FOLDER}/.sops.pub.asc"
  echo "${PUBLIC_KEY_NEW_CLUSTER}" \
  > "${CLUSTER_FOLDER}/.sops.pub.asc"

  # Prepare everything to perform a Flux bootstrap of the new remote cluster from the management cluster.
  # Here we also add the `age` private key to the **management cluster** as secret. This one will be used during bootstrap to inject the key into the new cluster
  CLUSTER_AGE_SECRET_NAME=$(safe_name "sops-age-${CLUSTER_KUSTOMIZATION_NAME}")
  echo "" |
  generator_bootstrap_new_cluster \
    "${CLUSTER_NAME}" \
    "${CLUSTER_KUSTOMIZATION_NAME}" \
    "${CLUSTER_AGE_SECRET_NAME}" | \
  generator_k8s_age_secret_new_cluster \
    "${PRIVATE_KEY_NEW_CLUSTER}" \
    "${PUBLIC_KEY_MGMT}" \
    "${CLUSTER_AGE_SECRET_NAME}" | \
  prepend_folder_path "${CLUSTER_KUSTOMIZATION_NAME}/" | \
  list2folder_cp_over \
    "${MGMT_RESOURCES_DIR}"
}


# Delete remote cluster (generic for any cloud)
function delete_remote_cluster() {
  local CLUSTER_KUSTOMIZATION_NAME="$1"
  local PROJECT_NAME="${2:-"${MGMT_PROJECT_NAME}"}"
  local FLEET_REPO_DIR="${3:-"${FLEET_REPO_DIR}"}"
  local MGMT_RESOURCES_DIR="${4:-"${MGMT_RESOURCES_DIR}"}"

  # Optional inputs: Paths for each profile in the Git repo
  local INFRA_CONTROLLERS_DIR="${5:-"${FLEET_REPO_DIR}/${PROJECT_NAME}/infra-controller-profiles/${CLUSTER_KUSTOMIZATION_NAME}"}"
  local INFRA_CONFIGS_DIR="${6:-"${FLEET_REPO_DIR}/${PROJECT_NAME}/infra-config-profiles/${CLUSTER_KUSTOMIZATION_NAME}"}"
  local MANAGED_RESOURCES_DIR="${7:-"${FLEET_REPO_DIR}/${PROJECT_NAME}/managed-resources/${CLUSTER_KUSTOMIZATION_NAME}"}"
  local APPS_DIR="${8:-"${FLEET_REPO_DIR}/${PROJECT_NAME}/app-profiles/${CLUSTER_KUSTOMIZATION_NAME}"}"
  local CLUSTER_DIR="${9:-"${FLEET_REPO_DIR}/clusters/${CLUSTER_KUSTOMIZATION_NAME}"}"

  # Delete profile folders
  rm -rf "${INFRA_CONTROLLERS_DIR}"
  rm -rf "${INFRA_CONFIGS_DIR}"
  rm -rf "${MANAGED_RESOURCES_DIR}"
  rm -rf "${APPS_DIR}"

  # Delete base cluster Kustomizations
  rm -rf "${CLUSTER_DIR}"

  # Delete cluster resources
  rm -rf "${MGMT_RESOURCES_DIR}/${CLUSTER_KUSTOMIZATION_NAME}"
}


# ----- Helper functions for adding/removing a profile from a cluster -----

# Helper function to find profiles of a given type already used in the cluster
function profiles_of_type_in_cluster() {
  local CLUSTER_KUSTOMIZATION_NAME="$1"
  local RELEVANT_PROFILE_TYPE="$2"
  local FLEET_REPO_DIR="${3:-"${FLEET_REPO_DIR}"}"

  # Calculated fields
  local CLUSTER_FOLDER="${FLEET_REPO_DIR}/clusters/${CLUSTER_KUSTOMIZATION_NAME}"

  # Processing (echoes the list)
  folder2list \
    "${CLUSTER_FOLDER}" | \
  get_value_from_resourcelist \
    ".metadata.name" \
    "| select(.kind == \"Kustomization\")
    | select(.metadata.labels.osm_profile_type == \"${RELEVANT_PROFILE_TYPE}\")" | \
  multiline2commalist
}


# Function to list the profiles **this profile depends on**
function profiles_this_one_depends_on() {
  local CLUSTER_KUSTOMIZATION_NAME="$1"
  local PROFILE_TYPE="$2"
  local FLEET_REPO_DIR="${3:-"${FLEET_REPO_DIR}"}"

  case "${PROFILE_TYPE,,}" in

    "controller" | "infra-controller" | "infra-controllers" | "infra_controller" | "infra_controllers")
      # Controllers do not depend on any other type of profiles
      echo ""
      return 0
      ;;

    "config" | "infra-config" | "infra-configs" | "infra_config" | "infra_configs")
      # Infra configs depend on controllers
      profiles_of_type_in_cluster \
        "${CLUSTER_KUSTOMIZATION_NAME}" \
        "infra-controllers" \
        "${FLEET_REPO_DIR}"
      return 0
      ;;

    "managed" | "resources" | "managed-resources" | "managed_resources")
      # Managed resources depend on infra configs
      profiles_of_type_in_cluster \
        "${CLUSTER_KUSTOMIZATION_NAME}" \
        "infra-configs" \
        "${FLEET_REPO_DIR}"
      return 0
      ;;

     "app" |"apps" | "applications" | "cnf" | "cnfs" | "nf" | "nfs")
      # Apps (also) depend on infra configs
      profiles_of_type_in_cluster \
        "${CLUSTER_KUSTOMIZATION_NAME}" \
        "infra-configs" \
        "${FLEET_REPO_DIR}"
      return 0
      ;;

    *)
      echo -n "------------ ERROR ------------"
      return 1
      ;;
  esac
}


# Function to list the profiles that **depend on this profile**
function profiles_depend_on_this_one() {
  local CLUSTER_KUSTOMIZATION_NAME="$1"
  local PROFILE_TYPE="$2"
  local FLEET_REPO_DIR="${3:-"${FLEET_REPO_DIR}"}"

  case "${PROFILE_TYPE,,}" in

    "controller" | "infra-controller" | "infra-controllers" | "infra_controller" | "infra_controllers")
      # Infra configs depend on infra controllers
      profiles_of_type_in_cluster \
        "${CLUSTER_KUSTOMIZATION_NAME}" \
        "infra-configs" \
        "${FLEET_REPO_DIR}"
      return 0
      ;;

    "config" | "infra-config" | "infra-configs" | "infra_config" | "infra_configs")
      # Both managed resources and apps depend on configs
      local PROFILES=(
        $(
          profiles_of_type_in_cluster \
            "${CLUSTER_KUSTOMIZATION_NAME}" \
            "managed-resources" \
            "${FLEET_REPO_DIR}"
        ) \
        $(
        profiles_of_type_in_cluster \
          "${CLUSTER_KUSTOMIZATION_NAME}" \
          "apps" \
          "${FLEET_REPO_DIR}"
        )
      )
      printf '%s,' "${PROFILES[@]}" | sed 's/,$//g'
      return 0
      ;;

    "managed" | "resources" | "managed-resources" | "managed_resources")
      # No other profiles depend on managed resources
      echo ""
      return 0
      ;;

     "app" |"apps" | "applications" | "cnf" | "cnfs" | "nf" | "nfs")
      # No other profiles depend on apps
      echo ""
      return 0
      ;;

    *)
      echo -n "------------ ERROR ------------"
      return 1
      ;;
  esac
}


# Helper function to add a dependency to a Kustomization only if it does not exist already
function add_dependency_to_kustomization_safely() {
  local KUSTOMIZATION_NAME="$1"
  local KUSTOMIZATION_TO_ADD_AS_DEP="$2"

  local INPUT=$(cat)
  local FILTER="| select(.kind == \"Kustomization\") | select(.metadata.name == \"${KUSTOMIZATION_NAME}\")"

  # Check if the dependency was added already
  local TEST_RESULT=$(
    echo "${INPUT}" | \
    is_element_on_list \
      ".spec.dependsOn[].name" \
      "${KUSTOMIZATION_TO_ADD_AS_DEP}" \
      "${FILTER}"
  )

  # If it existed already, returns the stream as is
  if [[ "${TEST_RESULT}" == "true" ]]
  then
    echo "${INPUT}"
  # Otherwise, processes the stream to add it
  else
    echo "${INPUT}" | \
    patch_add_to_list \
      ".spec.dependsOn" \
      "{name: ${KUSTOMIZATION_TO_ADD_AS_DEP}}" \
      "${FILTER}"
  fi
}


# Helper function to remove a dependency from a Kustomization
function remove_dependency_from_kustomization_safely() {
  local KUSTOMIZATION_NAME="$1"
  local KUSTOMIZATION_TO_REMOVE_AS_DEP="$2"

  # Calculated inputs
  local KEY_PATH=".spec.dependsOn[] | select(.name == \"${KUSTOMIZATION_TO_REMOVE_AS_DEP}\")"
  local FILTER="| select(.kind == \"Kustomization\") | select(.metadata.name == \"${KUSTOMIZATION_NAME}\")"

  # Remove the entry from the dependency list (if it exists)
  yq "del((.items[]${FILTER})${KEY_PATH})"
}


# Ensure list of Kustomizations depend on a given Kustomization
function add_dependency_to_set_of_kustomizations_safely() {
  local KS_NAME="$1"
  local THEY_DEPEND_ON_THIS="$2"

  local INPUT="$(cat)"
  local OUTPUT=""

  # For each of the Kustomizations on the comma-separated list, adds `KS_NAME` as one of their dependencies
  for KUST in ${THEY_DEPEND_ON_THIS//,/ }
  do
    local OUTPUT="$(
      echo "${INPUT}" | \
      add_dependency_to_kustomization_safely \
        "${KUST}" \
        "${KS_NAME}"
    )"
    local INPUT="${OUTPUT}"
  done

  # Return the final `ResultList`, after all iterations
  echo "${OUTPUT}"
}


# Ensure list of Kustomizations no longer depend on a given Kustomization
function remove_dependency_from_set_of_kustomizations_safely() {
  local KS_NAME="$1"
  local THEY_NO_LONGER_DEPEND_ON_THIS="$2"

  local INPUT="$(cat)"
  local OUTPUT=""

  # For each of the Kustomizations on the comma-separated list, removes `KS_NAME` from their dependencies
  for KUST in ${THEY_NO_LONGER_DEPEND_ON_THIS//,/ }
  do
    local OUTPUT="$(
      echo "${INPUT}" | \
      remove_dependency_from_kustomization_safely \
        "${KUST}" \
        "${KS_NAME}"
    )"
    local INPUT="${OUTPUT}"
  done

  # Return the final `ResultList`, after all iterations
  echo "${OUTPUT}"
}

# ----- END of Helper functions for adding/removing a profile from a cluster -----


# Add an existing profile to a cluster
function attach_profile_to_cluster() {
  local PROFILE_NAME="$1"
  local PROFILE_TYPE="$2"
  local PROJECT_NAME="$3"
  local CLUSTER_KUSTOMIZATION_NAME="$4"
  local FLEET_REPO_DIR="${5:-"${FLEET_REPO_DIR}"}"

  # Calculated inputs
  local CLUSTER_FOLDER="${FLEET_REPO_DIR}/clusters/${CLUSTER_KUSTOMIZATION_NAME}"
  local TARGET_PROFILE_PATH="$(
      path_to_profile \
        "${PROFILE_NAME}" \
        "${PROFILE_TYPE}" \
        "${PROJECT_NAME}"
  )"

  # Finds out which profiles it should depend on... and which profiles should depend on it
  local DEPENDS_ON=$(
    profiles_this_one_depends_on \
      "${CLUSTER_KUSTOMIZATION_NAME}" \
      "${PROFILE_TYPE}" \
      "${FLEET_REPO_DIR}"
  )

  local THEY_DEPEND_ON_THIS=$(
    profiles_depend_on_this_one \
      "${CLUSTER_KUSTOMIZATION_NAME}" \
      "${PROFILE_TYPE}" \
      "${FLEET_REPO_DIR}"
  )

  # Parameters for the new Kustomization object to point to the profile
  local KS_NAME="$(safe_name "${PROFILE_TYPE}-${PROFILE_NAME}")"
  local MANIFEST_FILENAME="${KS_NAME}.yaml"
  local KS_NS=flux-system
  local MANIFESTS_PATH="${TARGET_PROFILE_PATH}"
  local SOURCE_REPO=GitRepository/fleet-repo.flux-system
  local SOURCE_SYNC_INTERVAL="60m"
  local HEALTH_CHECK_TO="3m"
  local RETRY_INTERVAL="1m"
  local TIMEOUT="5m"
  local OPTIONS="\
    --decryption-provider=sops \
    --decryption-secret=sops-age \
    --prune=true \
    --timeout="${TIMEOUT}" \
    --retry-interval="${RETRY_INTERVAL}" \
    --label osm_profile_type="${PROFILE_TYPE}"
  "

  # Finally, we update the folder with all the required changes:
  # - Update pre-existing Kustomizations that should depend on the new profile (besides others).
  # - Create a new Kustomization pointing to the profile.
  # - Update Kustomize's `kustomization.yaml` at the root of the cluster folder to take into account the new Kustomization pointing to the profile.
  # - Update the cluster folder accordingly.
  folder2list \
    "${CLUSTER_FOLDER}" |
  add_dependency_to_set_of_kustomizations_safely \
    "${KS_NAME}" \
    "${THEY_DEPEND_ON_THIS}" | \
  generator_kustomization \
    "${MANIFEST_FILENAME}" \
    "${KS_NAME}" \
    "${KS_NS}" \
    "${SOURCE_REPO}" \
    "${MANIFESTS_PATH}" \
    "${SOURCE_SYNC_INTERVAL}" \
    "${HEALTH_CHECK_TO}" \
    "${DEPENDS_ON}" \
    "${OPTIONS}" | \
  patch_add_to_list \
    ".resources" \
    "${MANIFEST_FILENAME}" \
    "| select(.kind == \"Kustomization\") | select(.apiVersion == \"kustomize.config.k8s.io/v1beta1\") | select(.metadata.annotations.\"config.kubernetes.io/path\" == \"kustomization.yaml\")" | \
  list2folder_sync_replace \
    "${CLUSTER_FOLDER}"
}


# Remove an existing profile from a cluster
function detach_profile_from_cluster() {
  local PROFILE_NAME="$1"
  local PROFILE_TYPE="$2"
  local PROJECT_NAME="$3"
  local CLUSTER_KUSTOMIZATION_NAME="$4"
  local FLEET_REPO_DIR="${5:-"${FLEET_REPO_DIR}"}"

  # Calculated inputs
  local CLUSTER_FOLDER="${FLEET_REPO_DIR}/clusters/${CLUSTER_KUSTOMIZATION_NAME}"
  local TARGET_PROFILE_PATH="$(
      path_to_profile \
        "${PROFILE_NAME}" \
        "${PROFILE_TYPE}" \
        "${PROJECT_NAME}"
  )"

  # Finds out which profiles still depend on it
  local THEY_DEPEND_ON_THIS=$(
    profiles_depend_on_this_one \
      "${CLUSTER_KUSTOMIZATION_NAME}" \
      "${PROFILE_TYPE}" \
      "${FLEET_REPO_DIR}"
  )

  # Parameters for the new Kustomization object to point to the profile
  local KS_NAME="$(safe_name "${PROFILE_TYPE}-${PROFILE_NAME}")"

  # Finally, we update the folder with all the required changes:
  # - Update pre-existing Kustomizations that should depend on the new profile (besides others).
  # - Create a new Kustomization pointing to the profile.
  # - Update Kustomize's `kustomization.yaml` at the root of the cluster folder so that it no longer tries to gather the Kustomization pointing to the profile.
  # - Update the cluster folder accordingly.
  folder2list \
    "${CLUSTER_FOLDER}" |
  remove_dependency_from_set_of_kustomizations_safely \
    "${KS_NAME}" \
    "${THEY_DEPEND_ON_THIS}" | \
  delete_object \
    "${KS_NAME}" \
    "Kustomization" \
    "kustomize.toolkit.fluxcd.io/v1" | \
  patch_delete_from_list \
    ".resources[] | select(. == \"${MANIFEST_FILENAME}\") " \
    "| select(.kind == \"Kustomization\") | select(.apiVersion == \"kustomize.config.k8s.io/v1beta1\") | select(.metadata.annotations.\"config.kubernetes.io/path\" == \"kustomization.yaml\")" | \
  list2folder_sync_replace \
    "${CLUSTER_FOLDER}"
}


# Function to add a KSU into a profile
function create_ksu_into_profile() {
  local KSU_NAME="$1"
  local TARGET_PROFILE_FOLDER="$2"
  local TEMPLATES_PATH="$3"
  local SW_CATALOGS_REPO_DIR="$4"
  local TRANSFORMER="${5:-noop_transformer}"

  # Gathers all optional parameters for transformer funcion (if any) and puts them into an array for further use
  local ALL_PARAMS=( "${@}" )
  local TRANSFORMER_ARGS=( "${ALL_PARAMS[@]:5}" )

  # Composes the route to the local templates folder
  local TEMPLATES_FOLDER="${SW_CATALOGS_REPO_DIR}/${TEMPLATES_PATH}"

  folder2list \
    "${TEMPLATES_FOLDER}" | \
  "${TRANSFORMER}" \
    "${TRANSFORMER_ARGS[@]}" | \
  prepend_folder_path "${KSU_NAME}/" | \
  list2folder_cp_over \
    "${TARGET_PROFILE_FOLDER}"
}


# Function to delete a KSU from a profile
function delete_ksu_from_profile() {
  local KSU_NAME="$1"
  local TARGET_PROFILE_PATH="$2"
  local FLEET_REPO_DIR="${3:-"${FLEET_REPO_DIR}"}"

  # Calculate profile folder
  TARGET_PROFILE_FOLDER="${FLEET_REPO_DIR}/${TARGET_PROFILE_PATH}"

  # Delete the KSU folder
  rm -rf "${TARGET_PROFILE_FOLDER}/${KSU_NAME}"
}
