apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: osm-workflow-
  annotations:
    workflows.argoproj.io/description: |
      OSM workflow
spec:
  arguments:
    parameters:
    - name: git-secret
      value: "git-secret"
    - name: git-configmap
      value: "git-config"
    # - name: operation-id
    #   value: "operation-id-9041902348124"
  entrypoint: osm-workflow
  templates:
  - name: osm-workflow
    steps:
    # Block 0. Resources: PVC, configmap, secret
    - - name: generate-volume-repos
        template: generate-volume
        arguments:
          parameters:
            - name: pvc-size
              value: '100Mi'
    - - name: generate-volume-resources
        template: generate-volume
        arguments:
          parameters:
            - name: pvc-size
              value: '100Mi'
    - - name: generate-secret
        template: generate-secret
    - - name: generate-configmap
        template: generate-configmap
    - - name: check-initialization
        template: check-initialization
        arguments:
          parameters:
            - name: pvc-repos-name
              value: '{{steps.generate-volume-repos.outputs.parameters.pvc-name}}'
            - name: pvc-resources-name
              value: '{{steps.generate-volume-resources.outputs.parameters.pvc-name}}'
            - name: configmap-name
              value: '{{steps.generate-configmap.outputs.parameters.configmap-name}}'
            - name: secret-name
              value: '{{steps.generate-secret.outputs.parameters.secret-name}}'
    - - name: generate-operation-id
        template: gen-random-int-bash
    - - name: generate-random-name
        template: gen-random-name-python
    # Block 1. Clone repos
    - - name: clone-repo1
        template: clone-repo
        arguments:
          parameters:
            - name: pvc-repos-name
              value: '{{steps.generate-volume-repos.outputs.parameters.pvc-name}}'
            - name: pvc-resources-name
              value: '{{steps.generate-volume-resources.outputs.parameters.pvc-name}}'
            - name: configmap-name
              value: '{{steps.generate-configmap.outputs.parameters.configmap-name}}'
            - name: secret-name
              value: '{{steps.generate-secret.outputs.parameters.secret-name}}'
            - name: git-repo
              value: "git@gitlab.com:cloud-native-osm/shared/osm-gitops-operations.git"
            - name: git-folder
              value: "/app/repos/osm-gitops-operations"
    - - name: clone-repo2
        template: clone-repo
        arguments:
          parameters:
            - name: pvc-repos-name
              value: '{{steps.generate-volume-repos.outputs.parameters.pvc-name}}'
            - name: pvc-resources-name
              value: '{{steps.generate-volume-resources.outputs.parameters.pvc-name}}'
            - name: configmap-name
              value: '{{steps.generate-configmap.outputs.parameters.configmap-name}}'
            - name: secret-name
              value: '{{steps.generate-secret.outputs.parameters.secret-name}}'
            - name: git-repo
              value: "git@github.com:gerardo-garcia/gitops.git"
            - name: git-folder
              value: "/app/repos/gitops"
    # Block 2a. Generate message and print
    - - name: generate-message
        template: whalesay
        arguments:
          parameters:
            - name: pvc-repos-name
              value: '{{steps.generate-volume-repos.outputs.parameters.pvc-name}}'
            - name: pvc-resources-name
              value: '{{steps.generate-volume-resources.outputs.parameters.pvc-name}}'
            - name: configmap-name
              value: '{{steps.generate-configmap.outputs.parameters.configmap-name}}'
            - name: secret-name
              value: '{{steps.generate-secret.outputs.parameters.secret-name}}'
    - - name: print-message
        template: print-message
        arguments:
          parameters:
            - name: pvc-repos-name
              value: '{{steps.generate-volume-repos.outputs.parameters.pvc-name}}'
            - name: pvc-resources-name
              value: '{{steps.generate-volume-resources.outputs.parameters.pvc-name}}'
            - name: configmap-name
              value: '{{steps.generate-configmap.outputs.parameters.configmap-name}}'
            - name: secret-name
              value: '{{steps.generate-secret.outputs.parameters.secret-name}}'
    # Block 2b. List repo
    - - name: list-repo
        template: list-repo
        arguments:
          parameters:
            - name: pvc-repos-name
              value: '{{steps.generate-volume-repos.outputs.parameters.pvc-name}}'
            - name: pvc-resources-name
              value: '{{steps.generate-volume-resources.outputs.parameters.pvc-name}}'
            - name: configmap-name
              value: '{{steps.generate-configmap.outputs.parameters.configmap-name}}'
            - name: secret-name
              value: '{{steps.generate-secret.outputs.parameters.secret-name}}'
            - name: git-folder
              value: "/app/repos/osm-gitops-operations"
    # Block 2c. Get, echo, save resource list
    - - name: get-resource-list
        template: get-resource-list
        arguments:
          parameters:
            - name: pvc-repos-name
              value: '{{steps.generate-volume-repos.outputs.parameters.pvc-name}}'
            - name: pvc-resources-name
              value: '{{steps.generate-volume-resources.outputs.parameters.pvc-name}}'
            - name: configmap-name
              value: '{{steps.generate-configmap.outputs.parameters.configmap-name}}'
            - name: secret-name
              value: '{{steps.generate-secret.outputs.parameters.secret-name}}'
            - name: operation-id
              value: '{{steps.generate-operation-id.outputs.result}}'
              # value: '{{workflow.parameters.operation-id}}'
            - name: git-folder
              value: "/app/repos/gitops"
            - name: resource-folder
              value: "sw-catalogs/cluster-aks/cluster.yaml"
    - - name: echo-resource-list
        template: echo-resource-list
        arguments:
          parameters:
            - name: pvc-repos-name
              value: '{{steps.generate-volume-repos.outputs.parameters.pvc-name}}'
            - name: pvc-resources-name
              value: '{{steps.generate-volume-resources.outputs.parameters.pvc-name}}'
            - name: configmap-name
              value: '{{steps.generate-configmap.outputs.parameters.configmap-name}}'
            - name: secret-name
              value: '{{steps.generate-secret.outputs.parameters.secret-name}}'
            - name: operation-id
              value: '{{steps.generate-operation-id.outputs.result}}'
              # value: '{{workflow.parameters.operation-id}}'
            - name: input-resource-list
              value: "{{steps.get-resource-list.outputs.parameters.resource_list}}"
          # artifacts:
          #   - name: input-resource-list
          #     from: "{{steps.get-resource-list.outputs.artifacts.resource_list}}"
    - - name: save-resource-list
        template: save-resource-list
        arguments:
          parameters:
            - name: pvc-repos-name
              value: '{{steps.generate-volume-repos.outputs.parameters.pvc-name}}'
            - name: pvc-resources-name
              value: '{{steps.generate-volume-resources.outputs.parameters.pvc-name}}'
            - name: configmap-name
              value: '{{steps.generate-configmap.outputs.parameters.configmap-name}}'
            - name: secret-name
              value: '{{steps.generate-secret.outputs.parameters.secret-name}}'
            - name: operation-id
              value: '{{steps.generate-operation-id.outputs.result}}'
              # value: '{{workflow.parameters.operation-id}}'
            - name: input-resource-list
              value: '{{steps.echo-resource-list.outputs.parameters.resource_list}}'
            - name: git-folder
              value: "/app/repos/gitops"
            - name: destination-folder
              value: "managed-resources/clusters/{{steps.generate-random-name.outputs.result}}"
            - name: destination-file
              value: "cluster.yaml"
          # artifacts:
          #   - name: input-resource-list
          #     from: "{{steps.echo-resource-list.outputs.artifacts.resource_list}}"
    # Block 3. Commit and push
    - - name: commit-and-push-repo
        template: commit-and-push-repo
        arguments:
          parameters:
            - name: pvc-repos-name
              value: '{{steps.generate-volume-repos.outputs.parameters.pvc-name}}'
            - name: pvc-resources-name
              value: '{{steps.generate-volume-resources.outputs.parameters.pvc-name}}'
            - name: configmap-name
              value: '{{steps.generate-configmap.outputs.parameters.configmap-name}}'
            - name: secret-name
              value: '{{steps.generate-secret.outputs.parameters.secret-name}}'
            - name: operation-id
              value: '{{steps.generate-operation-id.outputs.result}}'
            - name: git-folder
              value: "/app/repos/gitops"
            - name: resource-folder
              value: "managed-resources/clusters/{{steps.generate-random-name.outputs.result}}"

  # Templates
  - name: generate-configmap
    serviceAccountName: argo
    resource:
      action: create
      setOwnerReference: true
      manifest: |
        apiVersion: v1
        kind: ConfigMap
        metadata:
          generateName: configmap-example-
        data:
          OSM_VAR1: "hello"
          OSM_VAR2: "world"
    outputs:
      parameters:
        - name: configmap-name
          valueFrom:
            jsonPath: '{.metadata.name}'

  - name: generate-secret
    serviceAccountName: argo
    resource:
      action: create
      setOwnerReference: true
      manifest: |
        apiVersion: v1
        kind: Secret
        type: Opaque
        metadata:
          generateName: secret-example-
          namespace: argo
        data:
          OSM_SECRET1: aGVsbG8K
          OSM_SECRET2: d29ybGQK
    outputs:
      parameters:
        - name: secret-name
          valueFrom:
            jsonPath: '{.metadata.name}'

  - name: generate-volume
    serviceAccountName: argo
    inputs:
      parameters:
        - name: pvc-size
    resource:
      action: create
      setOwnerReference: true
      manifest: |
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          generateName: pvc-osm-
        spec:
          accessModes: ['ReadWriteOnce']
          resources:
            requests:
              storage: '{{inputs.parameters.pvc-size}}'
    outputs:
      parameters:
        - name: pvc-name
          valueFrom:
            jsonPath: '{.metadata.name}'

  - name: check-initialization
    serviceAccountName: argo
    inputs:
      parameters:
        - name: pvc-repos-name
        - name: pvc-resources-name
        - name: configmap-name
        - name: secret-name
    volumes:
      - name: repos
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-repos-name}}'
      - name: resources
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-resources-name}}'
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["ls /mnt/vol; ls /mnt/vol2; echo ${OSM_VAR1} ${OSM_VAR2}; echo ${OSM_SECRET1} ${OSM_SECRET2};"]
      envFrom:
      - configMapRef:
          name: '{{inputs.parameters.configmap-name}}'
      - secretRef:
          name: '{{inputs.parameters.secret-name}}'
      volumeMounts:
      - name: repos
        mountPath: /mnt/vol
      - name: resources
        mountPath: /mnt/vol2

  - name: gen-random-int-bash
    serviceAccountName: argo
    script:
      image: alpine:3.19.1
      command: ["sh"]
      source: |
        cat /dev/urandom | tr -cd 'a-f0-9' | head -c 20

  - name: gen-random-name-python
    serviceAccountName: argo
    script:
      image: gerardogarcia/python:3.10
      command: [python]
      source: |
        import string
        import random
        import randomname
        random_name = randomname.get_name() + "-" + "".join(random.choices(string.ascii_uppercase + string.digits, k=7))
        print(random_name)

  - name: whalesay
    serviceAccountName: argo
    inputs:
      parameters:
        - name: pvc-repos-name
        - name: pvc-resources-name
        - name: configmap-name
        - name: secret-name
    volumes:
      - name: repos
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-repos-name}}'
      - name: resources
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-resources-name}}'
    container:
      image: docker/whalesay:latest
      command: [sh, -c]
      args: ["echo generating message in volume; cowsay hello world | tee /mnt/vol/hello_world.txt"]
      envFrom:
      - configMapRef:
          name: '{{inputs.parameters.configmap-name}}'
      - secretRef:
          name: '{{inputs.parameters.secret-name}}'
      volumeMounts:
      - name: repos
        mountPath: /mnt/vol
      - name: resources
        mountPath: /mnt/vol2

  - name: print-message
    serviceAccountName: argo
    inputs:
      parameters:
        - name: pvc-repos-name
        - name: pvc-resources-name
        - name: configmap-name
        - name: secret-name
    volumes:
      - name: repos
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-repos-name}}'
      - name: resources
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-resources-name}}'
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo getting message from volume; find /mnt/vol; cat /mnt/vol/hello_world.txt"]
      envFrom:
      - configMapRef:
          name: '{{inputs.parameters.configmap-name}}'
      - secretRef:
          name: '{{inputs.parameters.secret-name}}'
      volumeMounts:
      - name: repos
        mountPath: /mnt/vol
      - name: resources
        mountPath: /mnt/vol2

  - name: clone-repo
    serviceAccountName: argo
    inputs:
      parameters:
        - name: pvc-repos-name
        - name: pvc-resources-name
        - name: configmap-name
        - name: secret-name
        - name: git-repo
        - name: git-folder
    securityContext:
      runAsUser: 10000
      runAsGroup: 10000
      fsGroup: 10000
    volumes:
      - name: repos
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-repos-name}}'
      - name: resources
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-resources-name}}'
      - name: git-secret
        secret:
          secretName: '{{workflow.parameters.git-secret}}'
    container:
      image: gerardogarcia/osm-odu:latest
      command: [sh, -c]
      args: ["ls -la /app/repos; /app/scripts/clone_git_repo.sh"]
      envFrom:
      - configMapRef:
          name: '{{inputs.parameters.configmap-name}}'
      - secretRef:
          name: '{{inputs.parameters.secret-name}}'
      volumeMounts:
      - name: repos
        mountPath: /app/repos
      - name: resources
        mountPath: /app/resources
      - name: git-secret
        mountPath: "/app/.ssh"
      env: &env_parameters
      - name: GIT_REPO
        value: '{{inputs.parameters.git-repo}}'
      - name: GIT_REPO_FOLDER
        value: '{{inputs.parameters.git-folder}}'

  - name: list-repo
    serviceAccountName: argo
    inputs:
      parameters:
        - name: pvc-repos-name
        - name: pvc-resources-name
        - name: configmap-name
        - name: secret-name
        - name: git-folder
    securityContext:
      runAsUser: 10000
      runAsGroup: 10000
      fsGroup: 10000
    volumes:
      - name: repos
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-repos-name}}'
      - name: resources
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-resources-name}}'
    container:
      image: gerardogarcia/osm-odu:latest
      command: [sh, -c]
      args: ["ls -la ${REPO_FOLDER}; ls -la ${REPO_FOLDER}/..; ls -la ${REPO_FOLDER}/../.."]
      envFrom:
      - configMapRef:
          name: '{{inputs.parameters.configmap-name}}'
      - secretRef:
          name: '{{inputs.parameters.secret-name}}'
      env: &env_parameters
      - name: REPO_FOLDER
        value: "{{inputs.parameters.git-folder}}"
      volumeMounts:
      - name: repos
        mountPath: /app/repos
      - name: resources
        mountPath: /app/resources

  - name: get-resource-list
    serviceAccountName: argo
    inputs:
      parameters:
        - name: pvc-repos-name
        - name: pvc-resources-name
        - name: configmap-name
        - name: secret-name
        - name: operation-id
        - name: git-folder
        - name: resource-folder
    outputs:
      parameters:
        - name: resource_list
          valueFrom:
            path: /tmp/resource_list.yaml
      # artifacts:
      #   - name: resource_list  # name of artifact
      #     path: /tmp/resource_list.yaml # path
    securityContext:
      runAsUser: 10000
      runAsGroup: 10000
      fsGroup: 10000
    volumes:
      - name: repos
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-repos-name}}'
      - name: resources
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-resources-name}}'
    container:
      image: gerardogarcia/osm-odu:latest
      command: [sh, -c]
      args: ["/app/scripts/get_resource_list.sh {{inputs.parameters.resource-folder}} {{inputs.parameters.git-folder}} > /tmp/resource_list.yaml"]
      volumeMounts:
      - name: repos
        mountPath: /app/repos
      - name: resources
        mountPath: /app/resources
      envFrom:
      - configMapRef:
          name: '{{inputs.parameters.configmap-name}}'
      - secretRef:
          name: '{{inputs.parameters.secret-name}}'

  - name: echo-resource-list
    serviceAccountName: argo
    inputs:
      parameters:
        - name: pvc-repos-name
        - name: pvc-resources-name
        - name: configmap-name
        - name: secret-name
        - name: operation-id
        - name: input-resource-list
      # artifacts:
      #   - name: input-resource-list
      #     path: /tmp/input_resource_list.yaml
    outputs:
      parameters:
        - name: resource_list
          valueFrom:
            path: /tmp/resource_list.yaml
      # artifacts:
      # - name: resource_list  # name of artifact
      #   path: /tmp/resource_list.yaml # path
    securityContext:
      runAsUser: 10000
      runAsGroup: 10000
      fsGroup: 10000
    volumes:
      - name: repos
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-repos-name}}'
      - name: resources
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-resources-name}}'
    container:
      image: gerardogarcia/osm-odu:latest
      command: [sh, -c]
      args: ["echo '{{inputs.parameters.input-resource-list}}' > /tmp/resource_list.yaml"]
      volumeMounts:                     # same syntax as k8s Pod spec
      - name: repos
        mountPath: /app/repos
      - name: resources
        mountPath: /app/resources

  - name: save-resource-list
    serviceAccountName: argo
    inputs:
      parameters:
        - name: pvc-repos-name
        - name: pvc-resources-name
        - name: configmap-name
        - name: secret-name
        - name: operation-id
        - name: input-resource-list
        - name: git-folder
        - name: destination-folder
        - name: destination-file
      # artifacts:
      #   - name: input-resource-list
      #     path: /tmp/input_resource_list.yaml
    securityContext:
      runAsUser: 10000
      runAsGroup: 10000
      fsGroup: 10000
    volumes:
      - name: repos
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-repos-name}}'
      - name: resources
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-resources-name}}'
    container:
      image: gerardogarcia/osm-odu:latest
      command: [sh, -c]
      # args: ["echo {{inputs.parameters.destination-file}}; echo {{inputs.parameters.operation-id}}"]
      args: ["mkdir -p {{inputs.parameters.git-folder}}/{{inputs.parameters.destination-folder}}; echo '{{inputs.parameters.input-resource-list}}' > {{inputs.parameters.git-folder}}/{{inputs.parameters.destination-folder}}/{{inputs.parameters.destination-file}}; ls {{inputs.parameters.git-folder}}/{{inputs.parameters.destination-folder}}"]
      # command: ["echo"]
      # args: ["{{inputs.parameters.message}} > {{inputs.parameters.destination-file}}"]
      volumeMounts:                     # same syntax as k8s Pod spec
      - name: repos
        mountPath: /app/repos
      - name: resources
        mountPath: /app/resources

  - name: commit-and-push-repo
    serviceAccountName: argo
    inputs:
      parameters:
        - name: pvc-repos-name
        - name: pvc-resources-name
        - name: configmap-name
        - name: secret-name
        - name: operation-id
        - name: git-folder
        - name: resource-folder
      # artifacts:
      #   - name: resource_list  # name of artifact
      #     path: /tmp/resource_list.yaml # path
    securityContext:
      runAsUser: 10000
      runAsGroup: 10000
      fsGroup: 10000
    volumes:
      - name: repos
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-repos-name}}'
      - name: resources
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-resources-name}}'
      - name: git-secret
        secret:
          secretName: '{{workflow.parameters.git-secret}}'
    container:
      image: gerardogarcia/osm-odu:latest
      command: [sh, -c]
      args: ["/app/scripts/commit_and_push.sh"]
      volumeMounts:
      - name: repos
        mountPath: /app/repos
      - name: resources
        mountPath: /app/resources
      - name: git-secret
        mountPath: "/app/.ssh"
      envFrom:
      - configMapRef:
          name: '{{inputs.parameters.configmap-name}}'
      - secretRef:
          name: '{{inputs.parameters.secret-name}}'
      - configMapRef:
          name: '{{workflow.parameters.git-configmap}}'
      env:
      - name: GIT_REPO_FOLDER
        value: '{{inputs.parameters.git-folder}}'
      - name: GIT_BRANCH
        value: 'op-{{inputs.parameters.operation-id}}'
      - name: RESOURCE_FOLDER
        value: '{{inputs.parameters.resource-folder}}'
      - name: GIT_MAIN_BRANCH
        value: 'main'
      - name: COMMIT_MESSAGE
        value: 'Test commit message'
